generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String              @id @default(uuid())
  name                     String
  email                    String              @unique
  password                 String
  role                     Role
  profilePicture           String?
  languages                String[]
  location                 String?
  availability             DayOfWeek[]
  timeAvailability         TimeSlot[]
  rating                   Float?
  verified                 Boolean             @default(false)
  createdAt                DateTime            @default(now())
  skills                   Skill[]
  bio                      String
  booking                  String?
  company                  String?
  experienceLevel          ExperienceLevel     @default(ENTRY)
  school                   String?
  title                    String?
  bookingsAsMentee         Booking[]           @relation("BookingsAsMentee")
  bookingsAsMentor         Booking[]           @relation("BookingsAsMentor")
  mentee                   Mentee?
  mentor                   Mentor?
  mentorshipsAsMentee      Mentorship[]        @relation("MentorshipMentee")
  mentorshipsAsMentor      Mentorship[]        @relation("MentorshipMentor")
  mentorshipRequestsMentee MentorshipRequest[] @relation("MentorshipRequestsMentee")
  mentorshipRequestsMentor MentorshipRequest[] @relation("MentorshipRequestsMentor")
  receivedMessages         Message[]           @relation("ReceivedMessages")
  sentMessages             Message[]           @relation("SentMessages")
  ratingsGiven             Rating[]            @relation("RatingsGiven")
  ratingsReceived          Rating[]            @relation("RatingsReceived")
  sessionsAsMentee         Session[]           @relation("SessionsAsMentee")
  sessionsAsMentor         Session[]           @relation("SessionsAsMentor")
  tasksAsMentee            Task[]              @relation("TasksAsMentee")
  tasksAsMentor            Task[]              @relation("TasksAsMentor")
  profileComplete          Boolean             @default(false)
  conversationsAsMentee    Conversation[]      @relation("ConversationsAsMentee")
  conversationsAsMentor    Conversation[]      @relation("ConversationsAsMentor")
}

model Mentor {
  userId         String         @id
  specialization String[]
  pricing        Float?
  category       MentorCategory @default(OTHER)
  user           User           @relation(fields: [userId], references: [id])
}

model Mentee {
  userId String @id
  rating Float?
  goals  Goal[]
  user   User   @relation(fields: [userId], references: [id])
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  senderId       String
  receiverId     String
  content        String
  timestamp      DateTime     @default(now())
  attachment     String?
  status         String?
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
}

model Booking {
  id           String   @id @default(uuid())
  mentorId     String
  menteeId     String
  sessionId    String?  @unique
  status       String
  date         DateTime
  time         String
  description  String?
  offeringType String?
  title        String
  duration     Int
  mentee       User     @relation("BookingsAsMentee", fields: [menteeId], references: [id])
  mentor       User     @relation("BookingsAsMentor", fields: [mentorId], references: [id])
  session      Session? @relation("SessionBooking", fields: [sessionId], references: [id])
}

model Session {
  id       String   @id @default(uuid())
  mentorId String
  menteeId String
  date     DateTime
  time     String
  duration Int
  status   String
  description   String
  feedback String?
  rating   Float?
  title    String
  offeringType String?
  booking  Booking? @relation("SessionBooking")
  mentee   User     @relation("SessionsAsMentee", fields: [menteeId], references: [id])
  mentor   User     @relation("SessionsAsMentor", fields: [mentorId], references: [id])
}

model Mentorship {
  id        String   @id @default(uuid())
  mentorId  String
  menteeId  String
  status    MentorshipRequestStatus @default(PENDING)
  createdAt DateTime @default(now())
  mentee    User     @relation("MentorshipMentee", fields: [menteeId], references: [id])
  mentor    User     @relation("MentorshipMentor", fields: [mentorId], references: [id])
}

model Rating {
  id          String   @id @default(uuid())
  userId      String
  ratedById   String
  ratingValue Float
  date        DateTime @default(now())
  ratedBy     User     @relation("RatingsGiven", fields: [ratedById], references: [id])
  user        User     @relation("RatingsReceived", fields: [userId], references: [id])
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime?
  completed   Boolean    @default(false)
  goalTag     String?
  menteeId    String
  mentorId    String
  createdAt   DateTime   @default(now())
  status      TaskStatus
  mentee      User       @relation("TasksAsMentee", fields: [menteeId], references: [id])
  mentor      User       @relation("TasksAsMentor", fields: [mentorId], references: [id])
}

model MentorshipRequest {
  id           String                  @id @default(uuid())
  menteeId     String
  mentorId     String
  offeringType String
  message      String
  status       MentorshipRequestStatus @default(PENDING)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  mentee       User                    @relation("MentorshipRequestsMentee", fields: [menteeId], references: [id])
  mentor       User                    @relation("MentorshipRequestsMentor", fields: [mentorId], references: [id])
}

model Conversation {
  id            String       @id @default(uuid())
  mentorId      String
  menteeId      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  lastMessageAt DateTime?
  mentor        User         @relation("ConversationsAsMentor", fields: [mentorId], references: [id])
  mentee        User         @relation("ConversationsAsMentee", fields: [menteeId], references: [id])
  messages      Message[]

  @@unique([mentorId, menteeId])
}

enum MentorCategory {
  TECHNOLOGY
  BUSINESS
  DESIGN
  MARKETING
  CREATIVE
  HEALTH
  MUSIC
  OTHER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum MentorshipRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Role {
  MENTOR
  MENTEE
}

enum Skill {
  REACT
  NODE_JS
  TYPESCRIPT
  JAVASCRIPT
  PYTHON
  JAVA
  CSHARP
  CPLUSPLUS
  RUBY
  GO
  PHP
  SQL
  NOSQL
  SYSTEM_DESIGN
  MICROSERVICES
  DEVOPS
  AWS
  AZURE
  DOCKER
  KUBERNETES
  DATA_SCIENCE
  MACHINE_LEARNING
  DEEP_LEARNING
  COMPUTER_VISION
  NLP
  MLOPS
  BIG_DATA
  STATISTICS
  UX
  UI
  FIGMA
  DESIGN_SYSTEMS
  ACCESSIBILITY
  PORTFOLIO_REVIEW
  MOTION_DESIGN
  PRODUCT_MANAGEMENT
  AGILE
  SCRUM
  USER_RESEARCH
  MARKET_ANALYSIS
  BUSINESS_STRATEGY
  STARTUPS
  DIGITAL_MARKETING
  CONTENT_STRATEGY
  SEO
  SOCIAL_MEDIA
  BRANDING
  GROWTH_HACKING
  COPYWRITING
  STORYTELLING
  INTERVIEW_PREP
  RESUME_REVIEW
  CAREER_COACHING
  PUBLIC_SPEAKING
  NETWORKING
  LEADERSHIP
  TEAM_MANAGEMENT
}

enum Goal {
  GET_INTO_TECH
  TRANSITION_CAREER
  BUILD_PROJECTS
  FIND_MENTOR
  INTERVIEW_PREP
  RESUME_REVIEW
  CAREER_GUIDANCE
  LEARN_CODING
  PUBLIC_SPEAKING
  NETWORKING
}

enum ExperienceLevel {
  STUDENT
  ENTRY
  MID
  SENIOR
  LEAD
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TimeSlot {
  EARLY_MORNING   // 6-9 AM
  MORNING         // 9-12 PM
  AFTERNOON       // 12-5 PM
  EVENING         // 5-8 PM
  LATE_EVENING    // 8-11 PM
}
