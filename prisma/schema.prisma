// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  password       String
  role           Role // Either "MENTOR" or "MENTEE"
  profilePicture String?
  skills         Skill[] // Can hold multiple values
  experience     String[] // Can hold multiple values
  languages      String[] // Can hold multiple values
  location       String?
  company        String?
  booking        String?
  bio            String?
  availability   String?
  rating         Float?
  verified       Boolean  @default(false)

  // One-to-one: A user can be a mentor or mentee
  mentor Mentor?
  mentee Mentee?

  // One-to-many: A user can send and receive many messages
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  // Ratings the user has given and received
  ratingsGiven    Rating[] @relation("RatingsGiven")
  ratingsReceived Rating[] @relation("RatingsReceived")

  // Sessions the user has participated in (either role)
  sessionsAsMentor Session[] @relation("SessionsAsMentor")
  sessionsAsMentee Session[] @relation("SessionsAsMentee")

  // Bookings the user has created/received
  bookingsAsMentor Booking[] @relation("BookingsAsMentor")
  bookingsAsMentee Booking[] @relation("BookingsAsMentee")

  mentorshipsAsMentor Mentorship[] @relation("MentorshipMentor")
  mentorshipsAsMentee Mentorship[] @relation("MentorshipMentee")


  createdAt DateTime @default(now())
}

model Mentor {
  userId         String   @id
  specialization String[] // Multi-value field
  pricing        Float?

  // One-to-one relation back to User
  user User @relation(fields: [userId], references: [id])
}

model Mentee {
  userId String  @id
  goals  String?
  rating Float?

  // One-to-one relation back to User
  user User @relation(fields: [userId], references: [id])
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  timestamp  DateTime @default(now())
  attachment String?
  status     String?

  // Many-to-one: messages are linked to one sender and one receiver
  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Booking {
  id        String   @id @default(uuid())
  mentorId  String
  menteeId  String
  sessionId String?  @unique //to link session to booking
  status    String
  date      DateTime
  time      String

  // Booking belongs to a mentor, a mentee, and optionally a session
  mentor User @relation("BookingsAsMentor", fields: [mentorId], references: [id])
  mentee User @relation("BookingsAsMentee", fields: [menteeId], references: [id])

  session Session? @relation("SessionBooking", fields: [sessionId], references: [id])
}

model Session {
  id       String   @id @default(uuid())
  mentorId String
  menteeId String
  date     DateTime
  time     String
  duration Int
  status   String
  feedback String?
  rating   Float?

  // Many-to-one: each session has one mentor and one mentee
  mentor User @relation("SessionsAsMentor", fields: [mentorId], references: [id])
  mentee User @relation("SessionsAsMentee", fields: [menteeId], references: [id])

  booking Booking? @relation("SessionBooking")
}

model Mentorship {
  id        String   @id @default(uuid())
  mentorId  String
  menteeId  String
  createdAt DateTime @default(now())

  mentor User @relation("MentorshipMentor", fields: [mentorId], references: [id])
  mentee User @relation("MentorshipMentee", fields: [menteeId], references: [id])
}


model Rating {
  id          String   @id @default(uuid())
  userId      String // Who is being rated
  ratedById   String // Who gave the rating
  ratingValue Float
  date        DateTime @default(now())

  // Many-to-one: a user can receive many ratings
  user    User @relation("RatingsReceived", fields: [userId], references: [id])
  ratedBy User @relation("RatingsGiven", fields: [ratedById], references: [id])
}

enum Role {
  MENTOR
  MENTEE
}

enum Skill {
  REACT
  NODE_JS
  TYPESCRIPT
  JAVASCRIPT
  PYTHON
  JAVA
  CSHARP
  CPLUSPLUS
  RUBY
  GO
  PHP
  SQL
  NOSQL
  SYSTEM_DESIGN
  MICROSERVICES
  DEVOPS
  AWS
  AZURE
  DOCKER
  KUBERNETES
  DATA_SCIENCE
  MACHINE_LEARNING
  DEEP_LEARNING
  COMPUTER_VISION
  NLP
  MLOPS
  BIG_DATA
  STATISTICS
  UX
  UI
  FIGMA
  DESIGN_SYSTEMS
  ACCESSIBILITY
  PORTFOLIO_REVIEW
  MOTION_DESIGN
  PRODUCT_MANAGEMENT
  AGILE
  SCRUM
  USER_RESEARCH
  MARKET_ANALYSIS
  BUSINESS_STRATEGY
  STARTUPS
  DIGITAL_MARKETING
  CONTENT_STRATEGY
  SEO
  SOCIAL_MEDIA
  BRANDING
  GROWTH_HACKING
  COPYWRITING
  STORYTELLING
  INTERVIEW_PREP
  RESUME_REVIEW
  CAREER_COACHING
  PUBLIC_SPEAKING
  NETWORKING
  LEADERSHIP
  TEAM_MANAGEMENT
}
